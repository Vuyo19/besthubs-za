datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String? 
  createdAt DateTime @default(now()) // The time when the user was created 
  updatedAt DateTime @updatedAt
  role Role @default(USER)
  accounts      Account[]
  orders        Order[]
  reviews       Review[]
  favourites Favourites[]
}  

type Image {
  color String 
  image String
} 

model Favourites {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now()) // The time when the favourite was added

  @@unique([userId, productId]) // Ensure that the same product cannot be added more than once by the same user
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  description String  
  price Float 
  brand String
  category String 
  inStock Boolean 
  images Image[]
  unique_id String
  reviews Review[]
  favourites  Favourites[] // Relation to Favourites
  
}

model Review {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId 
    productId String @db.ObjectId
    rating Int 
    comment String 
    createdDate DateTime @default(now()) 

    product Product @relation(fields: [productId], references: [id])
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

} 

model Order {
    id          String         @id @default(auto()) @map("_id") @db.ObjectId 
    userId String @db.ObjectId
    amount Float 
    currency String
    status String
    deliveryStatus String? 
    createDate DateTime @default(now()) 
    paymentIntentId String @unique
    products CartProductType[] 
    address Address?  

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 

type CartProductType {
    id String
    name String 
    description String 
    category String 
    brand String 
    image String 
    quantity Int 
    price Float
} 

type Address {
  city String 
  country String 
  line1 String
  line2 String? 
  postal_code String
  state String
}

enum Role {
    USER
    ADMIN
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 